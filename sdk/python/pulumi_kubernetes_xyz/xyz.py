# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['XyzArgs', 'Xyz']

@pulumi.input_type
class XyzArgs:
    def __init__(__self__, *,
                 global_: Optional[pulumi.Input['XyzGlobalArgs']] = None,
                 helm_options: Optional[pulumi.Input['ReleaseArgs']] = None,
                 install_crds: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Xyz resource.
        :param pulumi.Input['ReleaseArgs'] helm_options: HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        """
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if helm_options is not None:
            pulumi.set(__self__, "helm_options", helm_options)
        if install_crds is not None:
            pulumi.set(__self__, "install_crds", install_crds)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['XyzGlobalArgs']]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['XyzGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="helmOptions")
    def helm_options(self) -> Optional[pulumi.Input['ReleaseArgs']]:
        """
        HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        """
        return pulumi.get(self, "helm_options")

    @helm_options.setter
    def helm_options(self, value: Optional[pulumi.Input['ReleaseArgs']]):
        pulumi.set(self, "helm_options", value)

    @property
    @pulumi.getter(name="installCRDs")
    def install_crds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "install_crds")

    @install_crds.setter
    def install_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_crds", value)


class Xyz(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 global_: Optional[pulumi.Input[pulumi.InputType['XyzGlobalArgs']]] = None,
                 helm_options: Optional[pulumi.Input[pulumi.InputType['ReleaseArgs']]] = None,
                 install_crds: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Automates the management and issuance of TLS certificates from various issuing sources within Kubernetes

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ReleaseArgs']] helm_options: HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[XyzArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Automates the management and issuance of TLS certificates from various issuing sources within Kubernetes

        :param str resource_name: The name of the resource.
        :param XyzArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(XyzArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 global_: Optional[pulumi.Input[pulumi.InputType['XyzGlobalArgs']]] = None,
                 helm_options: Optional[pulumi.Input[pulumi.InputType['ReleaseArgs']]] = None,
                 install_crds: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = XyzArgs.__new__(XyzArgs)

            __props__.__dict__["global_"] = global_
            __props__.__dict__["helm_options"] = helm_options
            __props__.__dict__["install_crds"] = install_crds
            __props__.__dict__["status"] = None
        super(Xyz, __self__).__init__(
            'kubernetes-xyz:index:Xyz',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ReleaseStatus']:
        """
        Detailed information about the status of the underlying Helm deployment.
        """
        return pulumi.get(self, "status")

